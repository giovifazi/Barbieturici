@256
D=A
@SP
M=D
//call Sys.init
@RETURN-1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN-1)
//function
(Main.main)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant
@25
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL0
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL0)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//call
@Funzioni.new
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL1
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL1)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@232
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@232
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawLine
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL2
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL2)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@231
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@231
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawLine
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL3
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL3)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(WHILE_EXP0$Main.main)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Main.main
D;JNE
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL4
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL4)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@233
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawRectangle
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL5
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL5)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@22
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.moveCursor
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL6
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL6)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL7
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL7)
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL8
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL8)
//call
@Keyboard.readLine
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL9
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL9)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@String.charAt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL10
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL10)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ0
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ0)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Main.main
D;JNE
//goto
@IF_FALSE0$Main.main
0;JMP
//label
(IF_TRUE0$Main.main)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END0$Main.main
0;JMP
//label
(IF_FALSE0$Main.main)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.execute
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL11
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL11)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_END0$Main.main)
//goto
@WHILE_EXP0$Main.main
0;JMP
//label
(WHILE_END0$Main.main)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Math.init)
@SP
M=M+1
A=M-1
M=0
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL12
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL12)
//pop static
@SP
AM=M-1
D=M
@Math.1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL13
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL13)
//pop static
@SP
AM=M-1
D=M
@Math.0
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(WHILE_EXP0$Math.init)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT0
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT0)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Math.init
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@WHILE_EXP0$Math.init
0;JMP
//label
(WHILE_END0$Math.init)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Math.abs)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT1
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT1)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.abs
D;JNE
//goto
@IF_FALSE0$Math.abs
0;JMP
//label
(IF_TRUE0$Math.abs)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//label
(IF_FALSE0$Math.abs)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Math.multiply)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT2
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT2)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT0
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT0)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT1
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT1)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT3
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT3)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL14
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL14)
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL15
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL15)
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT4
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT4)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.multiply
D;JNE
//goto
@IF_FALSE0$Math.multiply
0;JMP
//label
(IF_TRUE0$Math.multiply)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//label
(IF_FALSE0$Math.multiply)
//label
(WHILE_EXP0$Math.multiply)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//lt
@RETURN_LT5
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT5)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Math.multiply
D;JNE
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ1
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ1)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Math.multiply
D;JNE
//goto
@IF_FALSE1$Math.multiply
0;JMP
//label
(IF_TRUE1$Math.multiply)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_FALSE1$Math.multiply)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@WHILE_EXP0$Math.multiply
0;JMP
//label
(WHILE_END0$Math.multiply)
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Math.multiply
D;JNE
//goto
@IF_FALSE2$Math.multiply
0;JMP
//label
(IF_TRUE2$Math.multiply)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_FALSE2$Math.multiply)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Math.divide)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ2
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ2)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.divide
D;JNE
//goto
@IF_FALSE0$Math.divide
0;JMP
//label
(IF_TRUE0$Math.divide)
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL16
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL16)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Math.divide)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT6
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT6)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT2
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT2)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT3
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT3)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT7
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT7)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL17
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL17)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL18
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL18)
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//label
(WHILE_EXP0$Math.divide)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT8
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT8)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Math.divide
D;JNE
//push constant
@32767
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//lt
@RETURN_LT9
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT9)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Math.divide
D;JNE
//goto
@IF_FALSE1$Math.divide
0;JMP
//label
(IF_TRUE1$Math.divide)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//gt
@RETURN_GT4
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT4)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Math.divide
D;JNE
//goto
@IF_FALSE2$Math.divide
0;JMP
//label
(IF_TRUE2$Math.divide)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_FALSE2$Math.divide)
//label
(IF_FALSE1$Math.divide)
//goto
@WHILE_EXP0$Math.divide
0;JMP
//label
(WHILE_END0$Math.divide)
//label
(WHILE_EXP1$Math.divide)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//gt
@RETURN_GT5
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT5)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END1$Math.divide
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//gt
@RETURN_GT6
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT6)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$Math.divide
D;JNE
//goto
@IF_FALSE3$Math.divide
0;JMP
//label
(IF_TRUE3$Math.divide)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//label
(IF_FALSE3$Math.divide)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP1$Math.divide
0;JMP
//label
(WHILE_END1$Math.divide)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE4$Math.divide
D;JNE
//goto
@IF_FALSE4$Math.divide
0;JMP
//label
(IF_TRUE4$Math.divide)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(IF_FALSE4$Math.divide)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Math.sqrt)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT10
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT10)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.sqrt
D;JNE
//goto
@IF_FALSE0$Math.sqrt
0;JMP
//label
(IF_TRUE0$Math.sqrt)
//push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL19
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL19)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Math.sqrt)
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP0$Math.sqrt)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//gt
@RETURN_GT7
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT7)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Math.sqrt
D;JNE
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL20
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL20)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT8
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT8)
//not
@SP
A=M-1
M=!M
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT11
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT11)
//not
@SP
A=M-1
M=!M
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Math.sqrt
D;JNE
//goto
@IF_FALSE1$Math.sqrt
0;JMP
//label
(IF_TRUE1$Math.sqrt)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_FALSE1$Math.sqrt)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Math.sqrt
0;JMP
//label
(WHILE_END0$Math.sqrt)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Math.max)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT9
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT9)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.max
D;JNE
//goto
@IF_FALSE0$Math.max
0;JMP
//label
(IF_TRUE0$Math.max)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//label
(IF_FALSE0$Math.max)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Math.min)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT12
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT12)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Math.min
D;JNE
//goto
@IF_FALSE0$Math.min
0;JMP
//label
(IF_TRUE0$Math.min)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//label
(IF_FALSE0$Math.min)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.new)
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Memory.alloc
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL21
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL21)
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT13
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT13)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.new
D;JNE
//goto
@IF_FALSE0$String.new
0;JMP
//label
(IF_TRUE0$String.new)
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL22
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL22)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.new)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT10
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT10)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$String.new
D;JNE
//goto
@IF_FALSE1$String.new
0;JMP
//label
(IF_TRUE1$String.new)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL23
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL23)
//pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
//label
(IF_FALSE1$String.new)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.dispose)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this 0
@THIS
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT11
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT11)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.dispose
D;JNE
//goto
@IF_FALSE0$String.dispose
0;JMP
//label
(IF_TRUE0$String.dispose)
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Array.dispose
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL24
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL24)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.dispose)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Memory.deAlloc
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL25
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL25)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(String.length)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.charAt)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT14
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT14)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT12
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT12)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ3
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ3)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.charAt
D;JNE
//goto
@IF_FALSE0$String.charAt
0;JMP
//label
(IF_TRUE0$String.charAt)
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL26
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL26)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.charAt)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.setCharAt)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT15
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT15)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT13
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT13)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ4
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ4)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.setCharAt
D;JNE
//goto
@IF_FALSE0$String.setCharAt
0;JMP
//label
(IF_TRUE0$String.setCharAt)
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL27
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL27)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.setCharAt)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(String.appendChar)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push this 0
@THIS
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ5
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ5)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.appendChar
D;JNE
//goto
@IF_FALSE0$String.appendChar
0;JMP
//label
(IF_TRUE0$String.appendChar)
//push constant
@17
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL28
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL28)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.appendChar)
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.eraseLastChar)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ6
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ6)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.eraseLastChar
D;JNE
//goto
@IF_FALSE0$String.eraseLastChar
0;JMP
//label
(IF_TRUE0$String.eraseLastChar)
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL29
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL29)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.eraseLastChar)
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(String.intValue)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ7
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ7)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.intValue
D;JNE
//goto
@IF_FALSE0$String.intValue
0;JMP
//label
(IF_TRUE0$String.intValue)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//label
(IF_FALSE0$String.intValue)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ8
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ8)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$String.intValue
D;JNE
//goto
@IF_FALSE1$String.intValue
0;JMP
//label
(IF_TRUE1$String.intValue)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_FALSE1$String.intValue)
//label
(WHILE_EXP0$String.intValue)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT16
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT16)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$String.intValue
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT17
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT17)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT14
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT14)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$String.intValue
D;JNE
//goto
@IF_FALSE2$String.intValue
0;JMP
//label
(IF_TRUE2$String.intValue)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL30
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL30)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_FALSE2$String.intValue)
//goto
@WHILE_EXP0$String.intValue
0;JMP
//label
(WHILE_END0$String.intValue)
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$String.intValue
D;JNE
//goto
@IF_FALSE3$String.intValue
0;JMP
//label
(IF_TRUE3$String.intValue)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(IF_FALSE3$String.intValue)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.setInt)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push this 0
@THIS
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ9
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ9)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$String.setInt
D;JNE
//goto
@IF_FALSE0$String.setInt
0;JMP
//label
(IF_TRUE0$String.setInt)
//push constant
@19
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL31
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL31)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$String.setInt)
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL32
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL32)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT18
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT18)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$String.setInt
D;JNE
//goto
@IF_FALSE1$String.setInt
0;JMP
//label
(IF_TRUE1$String.setInt)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//label
(IF_FALSE1$String.setInt)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(WHILE_EXP0$String.setInt)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT15
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT15)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$String.setInt
D;JNE
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL33
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL33)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL34
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL34)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//goto
@WHILE_EXP0$String.setInt
0;JMP
//label
(WHILE_END0$String.setInt)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$String.setInt
D;JNE
//goto
@IF_FALSE2$String.setInt
0;JMP
//label
(IF_TRUE2$String.setInt)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_FALSE2$String.setInt)
//push this 0
@THIS
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT19
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT19)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$String.setInt
D;JNE
//goto
@IF_FALSE3$String.setInt
0;JMP
//label
(IF_TRUE3$String.setInt)
//push constant
@19
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL35
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL35)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE3$String.setInt)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ10
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ10)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE4$String.setInt
D;JNE
//goto
@IF_FALSE4$String.setInt
0;JMP
//label
(IF_TRUE4$String.setInt)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END4$String.setInt
0;JMP
//label
(IF_FALSE4$String.setInt)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(WHILE_EXP1$String.setInt)
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT20
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT20)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END1$String.setInt
D;JNE
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push this 1
@THIS
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push this
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop this
@THIS
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@WHILE_EXP1$String.setInt
0;JMP
//label
(WHILE_END1$String.setInt)
//label
(IF_END4$String.setInt)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Array.dispose
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL36
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL36)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(String.newLine)
//push constant
@128
D=A
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.backSpace)
//push constant
@129
D=A
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(String.doubleQuote)
//push constant
@34
D=A
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Sys.init)
//call
@Memory.init
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL37
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL37)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Math.init
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL38
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL38)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Screen.init
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL39
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL39)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Output.init
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL40
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL40)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Keyboard.init
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL41
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL41)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Main.main
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL42
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL42)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Sys.halt
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL43
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL43)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Sys.halt)
//label
(WHILE_EXP0$Sys.halt)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Sys.halt
D;JNE
//goto
@WHILE_EXP0$Sys.halt
0;JMP
//label
(WHILE_END0$Sys.halt)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Sys.wait)
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT21
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT21)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Sys.wait
D;JNE
//goto
@IF_FALSE0$Sys.wait
0;JMP
//label
(IF_TRUE0$Sys.wait)
//push constant 1
@SP
M=M+1
A=M-1
M=1
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL44
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL44)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Sys.wait)
//label
(WHILE_EXP0$Sys.wait)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT16
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT16)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Sys.wait
D;JNE
//push constant
@50
D=A
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP1$Sys.wait)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT17
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT17)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END1$Sys.wait
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP1$Sys.wait
0;JMP
//label
(WHILE_END1$Sys.wait)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//goto
@WHILE_EXP0$Sys.wait
0;JMP
//label
(WHILE_END0$Sys.wait)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Sys.error)
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL45
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL45)
//push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL46
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL46)
//push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL47
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL47)
//push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL48
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL48)
//call
@Output.printString
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL49
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL49)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.printInt
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL50
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL50)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Sys.halt
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL51
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL51)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.init)
//push constant
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Output.4
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL52
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL52)
//pop static
@SP
AM=M-1
D=M
@Output.3
M=D
//call
@Output.initMap
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL53
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL53)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@Output.createShiftedMap
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL54
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL54)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.initMap)
//push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL55
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL55)
//pop static
@SP
AM=M-1
D=M
@Output.5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL56
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL56)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL57
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL57)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@33
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL58
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL58)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@34
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@20
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL59
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL59)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL60
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL60)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@36
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL61
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL61)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@37
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL62
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL62)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL63
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL63)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@39
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL64
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL64)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@40
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL65
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL65)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@41
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL66
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL66)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@42
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL67
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL67)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL68
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL68)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL69
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL69)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL70
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL70)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@46
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL71
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL71)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@47
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL72
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL72)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL73
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL73)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL74
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL74)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@50
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL75
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL75)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL76
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL76)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@52
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@26
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@25
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL77
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL77)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@53
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL78
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL78)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL79
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL79)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL80
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL80)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL81
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL81)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@57
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL82
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL82)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL83
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL83)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL84
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL84)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL85
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL85)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@61
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL86
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL86)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL87
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL87)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@64
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL88
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL88)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL89
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL89)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@65
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL90
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL90)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@66
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL91
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL91)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@67
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL92
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL92)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@68
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL93
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL93)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL94
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL94)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@70
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL95
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL95)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@71
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL96
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL96)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@72
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL97
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL97)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@73
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL98
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL98)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@74
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL99
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL99)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@75
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL100
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL100)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL101
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL101)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@77
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@33
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL102
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL102)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@78
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL103
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL103)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@79
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL104
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL104)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@80
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL105
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL105)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@81
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL106
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL106)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL107
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL107)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@83
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL108
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL108)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@84
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL109
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL109)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@85
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL110
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL110)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@86
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL111
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL111)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@87
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL112
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL112)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@88
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL113
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL113)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@89
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL114
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL114)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@90
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL115
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL115)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@91
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL116
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL116)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@92
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL117
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL117)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@93
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL118
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL118)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@94
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL119
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL119)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@95
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL120
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL120)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@96
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL121
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL121)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@97
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL122
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL122)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@98
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL123
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL123)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@99
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL124
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL124)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@100
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL125
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL125)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@101
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL126
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL126)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@102
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL127
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL127)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@103
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL128
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL128)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@104
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL129
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL129)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@105
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL130
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL130)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@106
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL131
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL131)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@107
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL132
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL132)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@108
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL133
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL133)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@109
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL134
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL134)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@110
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL135
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL135)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@111
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL136
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL136)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@112
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL137
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL137)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@113
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL138
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL138)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@114
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL139
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL139)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@115
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL140
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL140)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@116
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL141
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL141)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@117
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL142
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL142)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@118
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL143
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL143)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@119
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL144
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL144)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@120
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL145
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL145)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@121
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL146
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL146)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@122
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL147
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL147)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@123
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL148
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL148)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@124
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL149
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL149)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@125
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL150
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL150)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant
@126
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@25
D=A
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.create
D=A
@R14
M=D
@12
D=A
@R13
M=D
@RETURN_CALL151
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL151)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.create)
@SP
M=M+1
A=M-1
M=0
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL152
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL152)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.createShiftedMap)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL153
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL153)
//pop static
@SP
AM=M-1
D=M
@Output.6
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(WHILE_EXP0$Output.createShiftedMap)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT22
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT22)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Output.createShiftedMap
D;JNE
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL154
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL154)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(WHILE_EXP1$Output.createShiftedMap)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT23
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT23)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END1$Output.createShiftedMap
D;JNE
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL155
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL155)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@WHILE_EXP1$Output.createShiftedMap
0;JMP
//label
(WHILE_END1$Output.createShiftedMap)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ11
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ11)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.createShiftedMap
D;JNE
//goto
@IF_FALSE0$Output.createShiftedMap
0;JMP
//label
(IF_TRUE0$Output.createShiftedMap)
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END0$Output.createShiftedMap
0;JMP
//label
(IF_FALSE0$Output.createShiftedMap)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_END0$Output.createShiftedMap)
//goto
@WHILE_EXP0$Output.createShiftedMap
0;JMP
//label
(WHILE_END0$Output.createShiftedMap)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.getMap)
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT24
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT24)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@126
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT18
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT18)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.getMap
D;JNE
//goto
@IF_FALSE0$Output.getMap
0;JMP
//label
(IF_TRUE0$Output.getMap)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//label
(IF_FALSE0$Output.getMap)
//push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Output.getMap
D;JNE
//goto
@IF_FALSE1$Output.getMap
0;JMP
//label
(IF_TRUE1$Output.getMap)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@IF_END1$Output.getMap
0;JMP
//label
(IF_FALSE1$Output.getMap)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_END1$Output.getMap)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Output.drawChar)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.getMap
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL156
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL156)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP0$Output.drawChar)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT25
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT25)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Output.drawChar
D;JNE
//push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.drawChar
D;JNE
//goto
@IF_FALSE0$Output.drawChar
0;JMP
//label
(IF_TRUE0$Output.drawChar)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
//neg
@SP
A=M-1
M=-M
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END0$Output.drawChar
0;JMP
//label
(IF_FALSE0$Output.drawChar)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_END0$Output.drawChar)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//goto
@WHILE_EXP0$Output.drawChar
0;JMP
//label
(WHILE_END0$Output.drawChar)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.moveCursor)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT26
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT26)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@22
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT19
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT19)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT27
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT27)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT20
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT20)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.moveCursor
D;JNE
//goto
@IF_FALSE0$Output.moveCursor
0;JMP
//label
(IF_TRUE0$Output.moveCursor)
//push constant
@20
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL157
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL157)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Output.moveCursor)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL158
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL158)
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@352
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL159
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL159)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL160
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL160)
//eq
@RETURN_EQ12
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ12)
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Output.drawChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL161
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL161)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.printChar)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.newLine
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL162
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL162)
//eq
@RETURN_EQ13
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ13)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.printChar
D;JNE
//goto
@IF_FALSE0$Output.printChar
0;JMP
//label
(IF_TRUE0$Output.printChar)
//call
@Output.println
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL163
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL163)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END0$Output.printChar
0;JMP
//label
(IF_FALSE0$Output.printChar)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.backSpace
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL164
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL164)
//eq
@RETURN_EQ14
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ14)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Output.printChar
D;JNE
//goto
@IF_FALSE1$Output.printChar
0;JMP
//label
(IF_TRUE1$Output.printChar)
//call
@Output.backSpace
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL165
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL165)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END1$Output.printChar
0;JMP
//label
(IF_FALSE1$Output.printChar)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.drawChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL166
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL166)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Output.printChar
D;JNE
//goto
@IF_FALSE2$Output.printChar
0;JMP
//label
(IF_TRUE2$Output.printChar)
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//label
(IF_FALSE2$Output.printChar)
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ15
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ15)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$Output.printChar
D;JNE
//goto
@IF_FALSE3$Output.printChar
0;JMP
//label
(IF_TRUE3$Output.printChar)
//call
@Output.println
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL167
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL167)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END3$Output.printChar
0;JMP
//label
(IF_FALSE3$Output.printChar)
//push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//label
(IF_END3$Output.printChar)
//label
(IF_END1$Output.printChar)
//label
(IF_END0$Output.printChar)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.printString)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL168
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL168)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(WHILE_EXP0$Output.printString)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT28
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT28)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Output.printString
D;JNE
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.charAt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL169
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL169)
//call
@Output.printChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL170
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL170)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Output.printString
0;JMP
//label
(WHILE_END0$Output.printString)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.printInt)
//push static
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.setInt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL171
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL171)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push static
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.printString
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL172
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL172)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.println)
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@352
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ16
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ16)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.println
D;JNE
//goto
@IF_FALSE0$Output.println
0;JMP
//label
(IF_TRUE0$Output.println)
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//label
(IF_FALSE0$Output.println)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Output.backSpace)
//push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Output.backSpace
D;JNE
//goto
@IF_FALSE0$Output.backSpace
0;JMP
//label
(IF_TRUE0$Output.backSpace)
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT21
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT21)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Output.backSpace
D;JNE
//goto
@IF_FALSE1$Output.backSpace
0;JMP
//label
(IF_TRUE1$Output.backSpace)
//push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//goto
@IF_END1$Output.backSpace
0;JMP
//label
(IF_FALSE1$Output.backSpace)
//push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Output.0
M=D
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ17
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ17)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Output.backSpace
D;JNE
//goto
@IF_FALSE2$Output.backSpace
0;JMP
//label
(IF_TRUE2$Output.backSpace)
//push constant
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//label
(IF_FALSE2$Output.backSpace)
//push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@321
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static
@SP
AM=M-1
D=M
@Output.1
M=D
//label
(IF_END1$Output.backSpace)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//goto
@IF_END0$Output.backSpace
0;JMP
//label
(IF_FALSE0$Output.backSpace)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop static
@SP
AM=M-1
D=M
@Output.2
M=D
//label
(IF_END0$Output.backSpace)
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Output.drawChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL173
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL173)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.new)
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Memory.alloc
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL174
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL174)
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL175
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL175)
//pop this 0
@SP
AM=M-1
D=M
@THIS
A=M
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL176
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL176)
//pop this 1
@SP
AM=M-1
D=M
@THIS
A=M+1
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.clearScreen)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL177
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL177)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@230
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawRectangle
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL178
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL178)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.execute)
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@String.charAt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL179
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL179)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@67
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ18
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ18)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Funzioni.execute
D;JNE
//goto
@IF_FALSE0$Funzioni.execute
0;JMP
//label
(IF_TRUE0$Funzioni.execute)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.clearScreen
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL180
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL180)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//goto
@IF_END0$Funzioni.execute
0;JMP
//label
(IF_FALSE0$Funzioni.execute)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@87
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ19
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ19)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Funzioni.execute
D;JNE
//goto
@IF_FALSE1$Funzioni.execute
0;JMP
//label
(IF_TRUE1$Funzioni.execute)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL181
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL181)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END1$Funzioni.execute
0;JMP
//label
(IF_FALSE1$Funzioni.execute)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//call
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL182
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL182)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_END1$Funzioni.execute)
//label
(IF_END0$Funzioni.execute)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//call
@String.charAt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL183
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL183)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ20
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ20)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Funzioni.execute
D;JNE
//goto
@IF_FALSE2$Funzioni.execute
0;JMP
//label
(IF_TRUE2$Funzioni.execute)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.line
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL184
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL184)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE2$Funzioni.execute)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@67
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ21
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ21)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$Funzioni.execute
D;JNE
//goto
@IF_FALSE3$Funzioni.execute
0;JMP
//label
(IF_TRUE3$Funzioni.execute)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.circle
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL185
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL185)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE3$Funzioni.execute)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@80
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ22
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ22)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE4$Funzioni.execute
D;JNE
//goto
@IF_FALSE4$Funzioni.execute
0;JMP
//label
(IF_TRUE4$Funzioni.execute)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.pixel
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL186
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL186)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE4$Funzioni.execute)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ23
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ23)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE5$Funzioni.execute
D;JNE
//goto
@IF_FALSE5$Funzioni.execute
0;JMP
//label
(IF_TRUE5$Funzioni.execute)
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.rectangle
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL187
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL187)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE5$Funzioni.execute)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.copyIntUntil)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL188
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL188)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(WHILE_EXP0$Funzioni.copyIntUntil)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Funzioni.copyIntUntil
D;JNE
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.charAt
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL189
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL189)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ24
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ24)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Funzioni.copyIntUntil
D;JNE
//goto
@IF_FALSE0$Funzioni.copyIntUntil
0;JMP
//label
(IF_TRUE0$Funzioni.copyIntUntil)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END0$Funzioni.copyIntUntil
0;JMP
//label
(IF_FALSE0$Funzioni.copyIntUntil)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL190
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL190)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//label
(IF_END0$Funzioni.copyIntUntil)
//goto
@WHILE_EXP0$Funzioni.copyIntUntil
0;JMP
//label
(WHILE_END0$Funzioni.copyIntUntil)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.line)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL191
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL191)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL192
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL192)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL193
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL193)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL194
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL194)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL195
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL195)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL196
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL196)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL197
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL197)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL198
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL198)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL199
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL199)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL200
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL200)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL201
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL201)
//push constant
@230
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT22
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT22)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Funzioni.line
D;JNE
//goto
@IF_FALSE0$Funzioni.line
0;JMP
//label
(IF_TRUE0$Funzioni.line)
//push constant 1
@SP
M=M+1
A=M-1
M=1
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL202
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL202)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Funzioni.line)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL203
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL203)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL204
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL204)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL205
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL205)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL206
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL206)
//call
@Screen.drawLine
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL207
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL207)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.circle)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL208
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL208)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL209
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL209)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL210
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL210)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL211
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL211)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL212
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL212)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL213
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL213)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL214
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL214)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL215
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL215)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL216
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL216)
//call
@Screen.drawCircle
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL217
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL217)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.rectangle)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL218
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL218)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL219
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL219)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL220
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL220)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL221
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL221)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL222
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL222)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL223
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL223)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL224
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL224)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL225
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL225)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL226
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL226)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL227
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL227)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL228
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL228)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL229
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL229)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL230
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL230)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL231
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL231)
//call
@Screen.drawRectangle
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL232
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL232)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Funzioni.pixel)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL233
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL233)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.length
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL234
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL234)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Funzioni.copyIntUntil
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL235
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL235)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL236
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL236)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL237
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL237)
//call
@Screen.drawPixel
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL238
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL238)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.init)
@SP
M=M+1
A=M-1
M=0
//push constant
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Screen.1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//not
@SP
A=M-1
M=!M
//pop static
@SP
AM=M-1
D=M
@Screen.2
M=D
//push constant
@17
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Array.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL239
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL239)
//pop static
@SP
AM=M-1
D=M
@Screen.0
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(WHILE_EXP0$Screen.init)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT29
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT29)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.init
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@WHILE_EXP0$Screen.init
0;JMP
//label
(WHILE_END0$Screen.init)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.clearScreen)
@SP
M=M+1
A=M-1
M=0
//label
(WHILE_EXP0$Screen.clearScreen)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@8192
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT30
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT30)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.clearScreen
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Screen.clearScreen
0;JMP
//label
(WHILE_END0$Screen.clearScreen)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.updateLocation)
//push static
@Screen.2
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.updateLocation
D;JNE
//goto
@IF_FALSE0$Screen.updateLocation
0;JMP
//label
(IF_TRUE0$Screen.updateLocation)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@IF_END0$Screen.updateLocation
0;JMP
//label
(IF_FALSE0$Screen.updateLocation)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(IF_END0$Screen.updateLocation)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.setColor)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop static
@SP
AM=M-1
D=M
@Screen.2
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawPixel)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT31
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT31)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT23
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT23)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT32
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT32)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT24
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT24)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawPixel
D;JNE
//goto
@IF_FALSE0$Screen.drawPixel
0;JMP
//label
(IF_TRUE0$Screen.drawPixel)
//push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL240
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL240)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Screen.drawPixel)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL241
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL241)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL242
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL242)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL243
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL243)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL244
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL244)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawConditional)
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawConditional
D;JNE
//goto
@IF_FALSE0$Screen.drawConditional
0;JMP
//label
(IF_TRUE0$Screen.drawConditional)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawPixel
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL245
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL245)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END0$Screen.drawConditional
0;JMP
//label
(IF_FALSE0$Screen.drawConditional)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawPixel
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL246
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL246)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_END0$Screen.drawConditional)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawLine)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT33
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT33)
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT25
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT25)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT34
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT34)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT26
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT26)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawLine
D;JNE
//goto
@IF_FALSE0$Screen.drawLine
0;JMP
//label
(IF_TRUE0$Screen.drawLine)
//push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL247
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL247)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Screen.drawLine)
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL248
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL248)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Math.abs
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL249
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL249)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT35
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT35)
//pop Local
@LCL
D=M
@6
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT36
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT36)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT37
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT37)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Screen.drawLine
D;JNE
//goto
@IF_FALSE1$Screen.drawLine
0;JMP
//label
(IF_TRUE1$Screen.drawLine)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument
@ARG
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop argument
@ARG
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_FALSE1$Screen.drawLine)
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Screen.drawLine
D;JNE
//goto
@IF_FALSE2$Screen.drawLine
0;JMP
//label
(IF_TRUE2$Screen.drawLine)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@8
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT27
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT27)
//pop Local
@LCL
D=M
@7
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END2$Screen.drawLine
0;JMP
//label
(IF_FALSE2$Screen.drawLine)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@LCL
D=M
@8
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT28
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT28)
//pop Local
@LCL
D=M
@7
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_END2$Screen.drawLine)
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL250
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL250)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@5
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL251
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL251)
//pop Local
@LCL
D=M
@9
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL252
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL252)
//pop Local
@LCL
D=M
@10
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawConditional
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL253
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL253)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(WHILE_EXP0$Screen.drawLine)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT38
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT38)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.drawLine
D;JNE
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT39
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT39)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$Screen.drawLine
D;JNE
//goto
@IF_FALSE3$Screen.drawLine
0;JMP
//label
(IF_TRUE3$Screen.drawLine)
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@5
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END3$Screen.drawLine
0;JMP
//label
(IF_FALSE3$Screen.drawLine)
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@5
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE4$Screen.drawLine
D;JNE
//goto
@IF_FALSE4$Screen.drawLine
0;JMP
//label
(IF_TRUE4$Screen.drawLine)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@IF_END4$Screen.drawLine
0;JMP
//label
(IF_FALSE4$Screen.drawLine)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(IF_END4$Screen.drawLine)
//label
(IF_END3$Screen.drawLine)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawConditional
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL254
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL254)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@WHILE_EXP0$Screen.drawLine
0;JMP
//label
(WHILE_END0$Screen.drawLine)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawRectangle)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT29
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT29)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT30
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT30)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT40
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT40)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT31
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT31)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT41
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT41)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT32
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT32)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawRectangle
D;JNE
//goto
@IF_FALSE0$Screen.drawRectangle
0;JMP
//label
(IF_TRUE0$Screen.drawRectangle)
//push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL255
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL255)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Screen.drawRectangle)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL256
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL256)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL257
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL257)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@7
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL258
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL258)
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL259
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL259)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@8
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@6
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@5
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL260
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL260)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(WHILE_EXP0$Screen.drawRectangle)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT33
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT33)
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.drawRectangle
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ25
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ25)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Screen.drawRectangle
D;JNE
//goto
@IF_FALSE1$Screen.drawRectangle
0;JMP
//label
(IF_TRUE1$Screen.drawRectangle)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL261
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL261)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END1$Screen.drawRectangle
0;JMP
//label
(IF_FALSE1$Screen.drawRectangle)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL262
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL262)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP1$Screen.drawRectangle)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT42
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT42)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END1$Screen.drawRectangle
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL263
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL263)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP1$Screen.drawRectangle
0;JMP
//label
(WHILE_END1$Screen.drawRectangle)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL264
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL264)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_END1$Screen.drawRectangle)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop argument 1
@SP
AM=M-1
D=M
@ARG
A=M+1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Screen.drawRectangle
0;JMP
//label
(WHILE_END0$Screen.drawRectangle)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawHorizontal)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.min
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL265
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL265)
//pop Local
@LCL
D=M
@7
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.max
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL266
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL266)
//pop Local
@LCL
D=M
@8
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//gt
@RETURN_GT34
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT34)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT43
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT43)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@512
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT44
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT44)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//gt
@RETURN_GT35
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT35)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawHorizontal
D;JNE
//goto
@IF_FALSE0$Screen.drawHorizontal
0;JMP
//label
(IF_TRUE0$Screen.drawHorizontal)
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Math.max
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL267
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL267)
//pop Local
@LCL
D=M
@7
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.min
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL268
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL268)
//pop Local
@LCL
D=M
@8
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL269
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL269)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL270
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL270)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@9
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.divide
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL271
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL271)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL272
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL272)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@10
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//not
@SP
A=M-1
M=!M
//pop Local
@LCL
D=M
@5
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL273
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL273)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@6
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ26
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ26)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Screen.drawHorizontal
D;JNE
//goto
@IF_FALSE1$Screen.drawHorizontal
0;JMP
//label
(IF_TRUE1$Screen.drawHorizontal)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL274
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL274)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END1$Screen.drawHorizontal
0;JMP
//label
(IF_FALSE1$Screen.drawHorizontal)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL275
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL275)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP0$Screen.drawHorizontal)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT45
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT45)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.drawHorizontal
D;JNE
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//neg
@SP
A=M-1
M=-M
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL276
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL276)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Screen.drawHorizontal
0;JMP
//label
(WHILE_END0$Screen.drawHorizontal)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL277
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL277)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_END1$Screen.drawHorizontal)
//label
(IF_FALSE0$Screen.drawHorizontal)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawSymetric)
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL278
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL278)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL279
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL279)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//call
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL280
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL280)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//call
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@R13
M=D
@RETURN_CALL281
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL281)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Screen.drawCircle)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT46
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT46)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT36
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT36)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT47
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT47)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT37
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT37)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Screen.drawCircle
D;JNE
//goto
@IF_FALSE0$Screen.drawCircle
0;JMP
//label
(IF_TRUE0$Screen.drawCircle)
//push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL282
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL282)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Screen.drawCircle)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT48
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT48)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT38
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT38)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT49
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT49)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT39
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT39)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Screen.drawCircle
D;JNE
//goto
@IF_FALSE1$Screen.drawCircle
0;JMP
//label
(IF_TRUE1$Screen.drawCircle)
//push constant
@13
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL283
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL283)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE1$Screen.drawCircle)
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push argument
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawSymetric
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL284
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL284)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(WHILE_EXP0$Screen.drawCircle)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT40
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT40)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Screen.drawCircle
D;JNE
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//lt
@RETURN_LT50
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT50)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Screen.drawCircle
D;JNE
//goto
@IF_FALSE2$Screen.drawCircle
0;JMP
//label
(IF_TRUE2$Screen.drawCircle)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL285
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL285)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//goto
@IF_END2$Screen.drawCircle
0;JMP
//label
(IF_FALSE2$Screen.drawCircle)
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call
@Math.multiply
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL286
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL286)
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(IF_END2$Screen.drawCircle)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Screen.drawSymetric
D=A
@R14
M=D
@4
D=A
@R13
M=D
@RETURN_CALL287
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL287)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@WHILE_EXP0$Screen.drawCircle
0;JMP
//label
(WHILE_END0$Screen.drawCircle)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Memory.init)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop static
@SP
AM=M-1
D=M
@Memory.0
M=D
//push constant
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@14334
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant
@2049
D=A
@SP
M=M+1
A=M-1
M=D
//push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@2050
D=A
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Memory.peek)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Memory.poke)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push argument
@ARG
A=M+1
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Memory.alloc)
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//lt
@RETURN_LT51
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT51)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Memory.alloc
D;JNE
//goto
@IF_FALSE0$Memory.alloc
0;JMP
//label
(IF_TRUE0$Memory.alloc)
//push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL288
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL288)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Memory.alloc)
//push constant
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//label
(WHILE_EXP0$Memory.alloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@RETURN_LT52
D=A
@R14
M=D
@VMGlobal.lt
0;JMP
(RETURN_LT52)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Memory.alloc
D;JNE
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//goto
@WHILE_EXP0$Memory.alloc
0;JMP
//label
(WHILE_END0$Memory.alloc)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@16379
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@RETURN_GT41
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT41)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Memory.alloc
D;JNE
//goto
@IF_FALSE1$Memory.alloc
0;JMP
//label
(IF_TRUE1$Memory.alloc)
//push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL289
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL289)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE1$Memory.alloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//gt
@RETURN_GT42
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT42)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE2$Memory.alloc
D;JNE
//goto
@IF_FALSE2$Memory.alloc
0;JMP
//label
(IF_TRUE2$Memory.alloc)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//eq
@RETURN_EQ27
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ27)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE3$Memory.alloc
D;JNE
//goto
@IF_FALSE3$Memory.alloc
0;JMP
//label
(IF_TRUE3$Memory.alloc)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@IF_END3$Memory.alloc
0;JMP
//label
(IF_FALSE3$Memory.alloc)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(IF_END3$Memory.alloc)
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(IF_FALSE2$Memory.alloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 0
@SP
M=M+1
A=M-1
M=0
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//return
@VMGlobal.return
0;JMP
//function
(Memory.deAlloc)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ28
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ28)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Memory.deAlloc
D;JNE
//goto
@IF_FALSE0$Memory.deAlloc
0;JMP
//label
(IF_TRUE0$Memory.deAlloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@IF_END0$Memory.deAlloc
0;JMP
//label
(IF_FALSE0$Memory.deAlloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//eq
@RETURN_EQ29
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ29)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Memory.deAlloc
D;JNE
//goto
@IF_FALSE1$Memory.deAlloc
0;JMP
//label
(IF_TRUE1$Memory.deAlloc)
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//goto
@IF_END1$Memory.deAlloc
0;JMP
//label
(IF_FALSE1$Memory.deAlloc)
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//push constant 1
@SP
M=M+1
A=M-1
M=1
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push that 0
@THAT
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//pop pointer
@SP
AM=M-1
D=M
@THAT
M=D
//push temp
@R5
D=M
@SP
M=M+1
A=M-1
M=D
//pop that
@SP
AM=M-1
D=M
@THAT
A=M
M=D
//label
(IF_END1$Memory.deAlloc)
//label
(IF_END0$Memory.deAlloc)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Array.new)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT43
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT43)
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Array.new
D;JNE
//goto
@IF_FALSE0$Array.new
0;JMP
//label
(IF_TRUE0$Array.new)
//push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Sys.error
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL290
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL290)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(IF_FALSE0$Array.new)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Memory.alloc
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL291
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL291)
//return
@VMGlobal.return
0;JMP
//function
(Array.dispose)
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop pointer
@SP
AM=M-1
D=M
@THIS
M=D
//push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Memory.deAlloc
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL292
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL292)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Keyboard.init)
//push constant 0
@SP
M=M+1
A=M-1
M=0
//return
@VMGlobal.return
0;JMP
//function
(Keyboard.keyPressed)
//push constant
@24576
D=A
@SP
M=M+1
A=M-1
M=D
//call
@Memory.peek
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL293
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL293)
//return
@VMGlobal.return
0;JMP
//function
(Keyboard.readChar)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push constant 0
@SP
M=M+1
A=M-1
M=0
//call
@Output.printChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL294
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL294)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//label
(WHILE_EXP0$Keyboard.readChar)
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//eq
@RETURN_EQ30
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ30)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT44
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT44)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Keyboard.readChar
D;JNE
//call
@Keyboard.keyPressed
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL295
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL295)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push constant 0
@SP
M=M+1
A=M-1
M=0
//gt
@RETURN_GT45
D=A
@R14
M=D
@VMGlobal.gt
0;JMP
(RETURN_GT45)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Keyboard.readChar
D;JNE
//goto
@IF_FALSE0$Keyboard.readChar
0;JMP
//label
(IF_TRUE0$Keyboard.readChar)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//label
(IF_FALSE0$Keyboard.readChar)
//goto
@WHILE_EXP0$Keyboard.readChar
0;JMP
//label
(WHILE_END0$Keyboard.readChar)
//call
@String.backSpace
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL296
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL296)
//call
@Output.printChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL297
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL297)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.printChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL298
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL298)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Keyboard.readLine)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push constant
@80
D=A
@SP
M=M+1
A=M-1
M=D
//call
@String.new
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL299
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL299)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Output.printString
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL300
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL300)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//call
@String.newLine
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL301
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL301)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//call
@String.backSpace
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL302
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL302)
//pop Local
@LCL
D=M
@2
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(WHILE_EXP0$Keyboard.readLine)
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@WHILE_END0$Keyboard.readLine
D;JNE
//call
@Keyboard.readChar
D=A
@R14
M=D
@0
D=A
@R13
M=D
@RETURN_CALL303
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL303)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ31
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ31)
//pop Local
@LCL
D=M
@4
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//push local
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//not
@SP
A=M-1
M=!M
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE0$Keyboard.readLine
D;JNE
//goto
@IF_FALSE0$Keyboard.readLine
0;JMP
//label
(IF_TRUE0$Keyboard.readLine)
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@RETURN_EQ32
D=A
@R14
M=D
@VMGlobal.eq
0;JMP
(RETURN_EQ32)
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE1$Keyboard.readLine
D;JNE
//goto
@IF_FALSE1$Keyboard.readLine
0;JMP
//label
(IF_TRUE1$Keyboard.readLine)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.eraseLastChar
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL304
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL304)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//goto
@IF_END1$Keyboard.readLine
0;JMP
//label
(IF_FALSE1$Keyboard.readLine)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.appendChar
D=A
@R14
M=D
@2
D=A
@R13
M=D
@RETURN_CALL305
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL305)
//pop Local
@LCL
D=M
@3
D=D+A
@R15
M=D
@SP
AM=M-1
D=M
@R15
A=M
M=D
//label
(IF_END1$Keyboard.readLine)
//label
(IF_FALSE0$Keyboard.readLine)
//goto
@WHILE_EXP0$Keyboard.readLine
0;JMP
//label
(WHILE_END0$Keyboard.readLine)
//push local
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
//function
(Keyboard.readInt)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
//push argument
@ARG
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@Keyboard.readLine
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL306
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL306)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.intValue
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL307
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL307)
//pop Local
@SP
AM=M-1
D=M
@LCL
A=M+1
M=D
//push local
@LCL
A=M
D=M
@SP
M=M+1
A=M-1
M=D
//call
@String.dispose
D=A
@R14
M=D
@1
D=A
@R13
M=D
@RETURN_CALL308
D=A
@VMGlobal.call
0;JMP
(RETURN_CALL308)
//pop temp
@SP
AM=M-1
D=M
@R5
M=D
//push local
@LCL
D=M
A=D+1
D=M
@SP
M=M+1
A=M-1
M=D
//return
@VMGlobal.return
0;JMP
@ENDFILE
0;JMP
//definisco funzioni globali
(VMGlobal.return)
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(VMGlobal.eq)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUEEQ
D;JEQ
@SP
A=M
A=A-1
M=0
@R14
A=M
0;JMP
(TRUEEQ)
@SP
A=M
A=A-1
M=-1
@R14
A=M
0;JMP
(VMGlobal.gt)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUEGT
D;JGT
@SP
A=M
A=A-1
M=0
@R14
A=M
0;JMP
(TRUEGT)
@SP
A=M
A=A-1
M=-1
@R14
A=M
0;JMP
(VMGlobal.lt)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUELT
D;JLT
@SP
A=M
A=A-1
M=0
@R14
A=M
0;JMP
(TRUELT)
@SP
A=M
A=A-1
M=-1
@R14
A=M
0;JMP
//call
(VMGlobal.call)
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@R13
D=D-M
@ARG
M=D
@SP
D=M
@LCL
M=D
@R14
A=M
0;JMP
(ENDFILE)
@ENDFILE
0;JMP
